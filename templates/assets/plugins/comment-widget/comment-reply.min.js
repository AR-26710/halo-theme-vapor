/* global document, window, localStorage, alert, Node */
var TEXT_NODE = typeof Node !== "undefined" && Node.TEXT_NODE ? Node.TEXT_NODE : 3;
window.addComment = (function (window) {
  // DOM helpers
  const doc = window.document;
  const config = {
    commentReplyClass: "comment-reply-link",
    commentReplyTitleId: "reply-title",
    cancelReplyId: "cancel-comment-reply-link",
    commentFormId: "commentform",
    temporaryFormId: "wp-temp-form-div",
    parentIdFieldId: "comment_parent",
    postIdFieldId: "comment_post_ID",
  };

  // MutationObserver
  const MutationObs = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
  const supportsQuerySelector = "querySelector" in doc && "addEventListener" in window;
  const hasDataset = !!doc.documentElement.dataset;

  // Internal state
  let cancelBtn, commentForm, tempFormDiv;

  // 初始化
  function init() {
    setupListeners();
    if (MutationObs) {
      new MutationObs(handleDomMutation).observe(doc.body, { childList: true, subtree: true });
    }
  }

  // 绑定事件
  function setupListeners(context) {
    if (!supportsQuerySelector) return;

    // Ctrl+Enter 提交
    function handleKeydown(e) {
      if ((e.metaKey || e.ctrlKey) && e.keyCode === 13 && doc.activeElement.tagName.toLowerCase() !== "a") {
        commentForm.removeEventListener("keydown", handleKeydown);
        e.preventDefault();
        commentForm.submit.click();
        return false;
      }
    }

    cancelBtn = getById(config.cancelReplyId);
    commentForm = getById(config.commentFormId);
    if (cancelBtn) {
      cancelBtn.addEventListener("touchstart", handleCancelReply);
      cancelBtn.addEventListener("click", handleCancelReply);
      commentForm && commentForm.addEventListener("keydown", handleKeydown);
      // 绑定所有回复按钮
      const replyLinks = getReplyLinks(context);
      for (let i = 0; i < replyLinks.length; i++) {
        replyLinks[i].addEventListener("touchstart", handleReplyClick);
        replyLinks[i].addEventListener("click", handleReplyClick);
      }
    }
  }

  // 取消回复
  function handleCancelReply(e) {
    const tempDiv = getById(config.temporaryFormId);
    if (tempDiv && tempFormDiv) {
      getById(config.parentIdFieldId).value = "0";
      const oldTitle = tempDiv.textContent;
      tempDiv.parentNode.replaceChild(tempFormDiv, tempDiv);
      this.style.display = "none";
      const replyWrap = getById("reply-wrap");
      replyWrap.style.display = "none";
      replyWrap.nextElementSibling.style.display = "none";
      // 恢复标题
      const titleNode = getById(config.commentReplyTitleId);
      const textNode = titleNode && titleNode.firstChild;
      const nextNode = textNode && textNode.nextSibling;
      if (textNode && textNode.nodeType === TEXT_NODE && oldTitle) {
        if (nextNode && nextNode.nodeName === "A" && nextNode.id !== config.cancelReplyId) {
          nextNode.style.display = "";
        }
        textNode.textContent = oldTitle;
      }
      e.preventDefault();
    }
  }

  // 点击“回复”按钮
  function handleReplyClick(e) {
    const titleNode = getById(config.commentReplyTitleId);
    const defaultTitle = titleNode && titleNode.firstChild.textContent;
    const belowElementId = getData(this, "belowelement");
    const commentId = getData(this, "commentid");
    const respondElementId = getData(this, "respondelement");
    const postId = getData(this, "postid");
    const replyTo = getData(this, "replyto") || defaultTitle;
    const replyWrap = getById("reply-wrap");
    replyWrap.style.display = "flex";
    replyWrap.nextElementSibling.style.display = "block";
    if (belowElementId && commentId && respondElementId && postId) {
      const moved = window.addComment.moveForm(belowElementId, commentId, respondElementId, postId, replyTo);
      e.preventDefault();
      if (moved === false) e.preventDefault();
    }
  }

  // DOM 变动时重新绑定
  function handleDomMutation(mutations) {
    for (let i = mutations.length; i--; ) {
      if (mutations[i].addedNodes.length) {
        setupListeners();
        return;
      }
    }
  }

  // 获取 data-xxx 属性
  function getData(el, key) {
    return hasDataset ? el.dataset[key] : el.getAttribute("data-" + key);
  }

  // 获取元素
  function getById(id) {
    return doc.getElementById(id);
  }

  // 获取所有回复按钮
  function getReplyLinks(context) {
    const className = config.commentReplyClass;
    let root = context;
    if (!root || !root.childNodes) root = doc;
    return doc.getElementsByClassName ? root.getElementsByClassName(className) : root.querySelectorAll("." + className);
  }

  // 移动表单到回复位置
  function moveForm(belowId, commentId, respondId, postId, replyToText) {
    let i, style, computedStyle, hidden, focusSet;
    const belowElem = getById(belowId);
    tempFormDiv = getById(respondId);
    const parentIdField = getById(config.parentIdFieldId);
    const postIdField = getById(config.postIdFieldId);
    const replyTitle = getById(config.commentReplyTitleId);
    const textNode = replyTitle && replyTitle.firstChild;
    const nextNode = textNode && textNode.nextSibling;
    if (belowElem && tempFormDiv && parentIdField) {
      if (replyToText === undefined) replyToText = textNode && textNode.textContent;
      // 创建临时 div 保存原表单位置
      let tempDiv = getById(config.temporaryFormId);
      const oldTitle = (getById(config.commentReplyTitleId) || {}).firstChild?.textContent || "";
      if (!tempDiv) {
        tempDiv = doc.createElement("div");
        tempDiv.id = config.temporaryFormId;
        tempDiv.style.display = "none";
        tempDiv.textContent = oldTitle;
        tempFormDiv.parentNode.insertBefore(tempDiv, tempFormDiv);
      }
      // 设置表单字段
      postId && (postIdField.value = postId);
      parentIdField.value = commentId;
      cancelBtn.style.display = "";
      // 移动表单
      belowElem.parentNode.insertBefore(tempFormDiv, belowElem.nextSibling);
      // 设置标题
      if (textNode && textNode.nodeType === TEXT_NODE) {
        if (nextNode && nextNode.nodeName === "A" && nextNode.id !== config.cancelReplyId) {
          nextNode.style.display = "none";
        }
        textNode.textContent = replyToText;
      }
      // 禁止取消按钮默认行为
      cancelBtn.onclick = function () {
        return false;
      };
      // 自动聚焦第一个可见输入框
      try {
        for (let f = 0; f < commentForm.elements.length; f++) {
          i = commentForm.elements[f];
          hidden = false;
          if ("getComputedStyle" in window) {
            computedStyle = window.getComputedStyle(i);
          } else if (doc.documentElement.currentStyle) {
            computedStyle = i.currentStyle;
          }
          if ((i.offsetWidth <= 0 && i.offsetHeight <= 0) || (computedStyle && computedStyle.visibility === "hidden")) {
            hidden = true;
          }
          if (i.type !== "hidden" && !i.disabled && !hidden) {
            i.focus();
            break;
          }
        }
      } catch (e) {
        console.warn(e);
      }
      return false;
    }
  }

  // 初始化
  if (supportsQuerySelector && doc.readyState !== "loading") {
    init();
  } else if (supportsQuerySelector) {
    window.addEventListener("DOMContentLoaded", init, false);
  }

  // 对外暴露
  return {
    init: setupListeners,
    moveForm: moveForm,
  };
})(window);
